---
- name: install project packages
  become: yes
  become_method: sudo
  become_user: root
  apt: name={{ item }} state=present update_cache=true
  with_items:
    - git
    - python-virtualenv
  register: packages_installed

- name: create project directory
  become: yes
  become_method: sudo
  become_user: root
  file:
    path={{ locations.repo }}
    state=directory
    owner={{ project_user }}
    group={{ project_user }}
    mode=0755
  register: project_directory_created

- name: copy git config
  when: packages_installed|success
  become: yes
  become_user: "{{ project_user }}"
  template: src=gitconfig.j2 dest={{ ansible_env.HOME }}/.gitconfig

- name: fetch project repository
  when: packages_installed|success and project_directory_created|success
  become: yes
  become_method: sudo
  become_user: "{{ project_user }}"
  git: repo={{ github.address }} dest={{ locations.repo }}

- name: install project requirements
  when: packages_installed|success and project_directory_created|success
  pip:
    requirements: "{{ locations.requirements }}"
    virtualenv: "{{ locations.virtualenv }}"
    virtualenv_python: python3

- name: create settings directory
  become: yes
  become_method: sudo
  become_user: root
  file:
    path={{ locations.settings }}
    state=directory
    owner={{ project_user }}
    group={{ project_user }}
    mode=0755
  register: settings_directory_created
 
- name: copy project settings
  when: settings_directory_created|success
  become: yes
  become_user: "{{ project_user }}"
  template: src=settings.j2 dest={{ locations.settings_file }}
  register: project_settings_copied

- name: copy gunicorn settings
  when: settings_directory_created|success
  become: yes
  become_user: "{{ project_user }}"
  template:
    src=gunicorn-config.j2
    dest={{ locations.gunicorn_settings_file }}
  register: gunicorn_settings_copied

- name: copy start server script
  become: yes
  become_method: sudo
  become_user: root
  template:
    src=start-server.j2
    dest={{ locations.start_server_script }}
    owner={{ project_user }}
    group={{ project_user }}
    mode=0755
  register: start_server_script_copied

- name: run database migrations
  when: project_settings_copied|success
  django_manage:
    command=migrate
    app_path={{ locations.project }}
    virtualenv={{ locations.virtualenv }}

- name: collect static files
  when: project_settings_copied|success
  django_manage:
    command=collectstatic
    app_path={{ locations.project }}
    virtualenv={{ locations.virtualenv }}

